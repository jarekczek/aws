apply plugin: 'java'
apply plugin: 'kotlin'

apply plugin: 'eclipse'
eclipse.classpath.downloadJavadoc = true
eclipse.classpath.downloadSources = false
tasks.eclipse {
  doLast {
    'D:\\Program_Files\\eSpeak\\command_line\\espeak.exe eclipse'.execute()
  }
}

apply plugin: 'idea'
idea.module.downloadJavadoc = true
idea.module.downloadSources = true

repositories {
	mavenCentral()
}

dependencies {
  compile 'org.apache.logging.log4j:log4j-api:2.11.0'
  compile 'org.apache.logging.log4j:log4j-api:2.11.0:sources'
  compile 'org.apache.logging.log4j:log4j-core:2.11.0'
  compile 'org.apache.logging.log4j:log4j-core:2.11.0:sources'
  compile 'org.slf4j:slf4j-api:1.7.30'
  compile 'ch.qos.logback:logback-classic:1.2.3'
  compile 'ch.qos.logback:logback-core:1.2.3'
  implementation 'com.amazonaws:aws-lambda-java-core:1.2.1'
  implementation 'com.amazonaws:aws-lambda-java-events:2.2.9'
  implementation 'com.amazonaws:aws-java-sdk-s3:1.11.578'
	testCompile 'junit:junit:4.12'
  testCompile 'junit-addons:junit-addons:1.4'
  testCompile 'org.assertj:assertj-core:3.7.0'
  compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

	
tasks.withType(Test) {
  outputs.upToDateWhen {false}
  testLogging.showStandardStreams = true
  testLogging.exceptionFormat = 'full'
}
buildscript {
    ext.kotlin_version = '1.2.41'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task cp {
  group = 'jarek'
  doLast {
    sourceSets.main.runtimeClasspath.each { println("set classpath=%classpath%;$it") }
  }
}